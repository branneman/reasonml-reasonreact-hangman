// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var Random      = require("bs-platform/lib/js/random.js");
var $$String    = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

Random.self_init(/* () */0);

var wordList = /* :: */[
  "awesomeness",
  /* :: */[
    "react",
    /* :: */[
      "reasonml",
      /* :: */[
        "rotterdam",
        /* [] */0
      ]
    ]
  ]
];

var hangmanTemplate = /* :: */[
  "       \n       \n       \n       \n       \n       \n         ",
  /* :: */[
    "       \n       \n       \n       \n       \n       \n=========",
    /* :: */[
      "       \n      |\n      |\n      |\n      |\n      |\n=========",
      /* :: */[
        "  +---+\n      |\n      |\n      |\n      |\n      |\n=========",
        /* :: */[
          "  +---+\n  |   |\n      |\n      |\n      |\n      |\n=========",
          /* :: */[
            "  +---+\n  |   |\n  O   |\n      |\n      |\n      |\n=========",
            /* :: */[
              "  +---+\n  |   |\n  O   |\n  |   |\n      |\n      |\n=========",
              /* :: */[
                "  +---+\n  |   |\n  O   |\n /|   |\n      |\n      |\n=========",
                /* :: */[
                  "  +---+\n  |   |\n  O   |\n /|\\  |\n      |\n      |\n=========",
                  /* :: */[
                    "  +---+\n  |   |\n  O   |\n /|\\  |\n /    |\n      |\n=========",
                    /* :: */[
                      "  +---+\n  |   |\n  O   |\n /|\\  |\n / \\  |\n      |\n=========",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function join(str, list) {
  return $$String.concat(str, List.map((function (param) {
                    return $$String.make(1, param);
                  }), list));
}

function str(prim) {
  return prim;
}

function getErrorLetters(word) {
  return List.filter((function (letter) {
                return 1 - $$String.contains(word, letter);
              }));
}

function getConstructedWord(word, letters) {
  return $$String.map((function (wc) {
                var match = List.exists((function (lc) {
                        return +(wc === lc);
                      }), letters);
                if (match !== 0) {
                  return wc;
                } else {
                  return /* "." */46;
                }
              }), word);
}

var component = ReasonReact.reducerComponent("Hangman");

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      document.addEventListener("keypress", (function () {
              var keyCode = Caml_string.get(( arguments[0].key ), 0);
              Curry._2(self[/* reduce */1], (function () {
                      return /* Letter */[keyCode];
                    }), /* () */0);
              return /* () */0;
            }));
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (self) {
      var errorLetters = getErrorLetters(self[/* state */2][/* word */0])(self[/* state */2][/* letters */1]);
      var constructedWord = getConstructedWord(self[/* state */2][/* word */0], self[/* state */2][/* letters */1]);
      return React.createElement("div", undefined, React.createElement("div", {
                      className: "hangman hangman--shadow"
                    }, List.nth(hangmanTemplate, 10)), React.createElement("div", {
                      className: "hangman"
                    }, List.nth(hangmanTemplate, List.length(errorLetters)), React.createElement("div", {
                          className: "word"
                        }, constructedWord)), React.createElement("div", {
                      className: "letters"
                    }, join("\n", errorLetters)));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* word */List.nth(wordList, Random.$$int(List.length(wordList))),
              /* letters : [] */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      return /* Update */Block.__(0, [/* record */[
                  /* word */state[/* word */0],
                  /* letters : :: */[
                    action[0],
                    state[/* letters */1]
                  ]
                ]]);
    });
  return newrecord;
}

exports.wordList           = wordList;
exports.hangmanTemplate    = hangmanTemplate;
exports.join               = join;
exports.str                = str;
exports.getErrorLetters    = getErrorLetters;
exports.getConstructedWord = getConstructedWord;
exports.component          = component;
exports.make               = make;
/*  Not a pure module */
